#!/usr/bin/env node
"use strict"
const Fs = require('fs')
const Yaml = require('js-yaml')

const SphinxToTr = require('../SphinxToTr');
const Logger = require('../lib/RespecLogger');

const DefaultOptions = {
  "timeout": 10,
  "use-local": false,
  "disable-sandbox": false,
  "devtools": false,
  "verbose": false
}

run(DefaultOptions)

async function run (opts) {
  if (process.argv.length < 3) {
    const exe = process.argv[1]
    fail(`Usage: ${exe} <YAML config file>
${exe} foo-cfg.yaml`, -1)
  }
  try {
    const {indexPath, frontMatterFile, topMatterFile, outDir, unnumberedLinkText} = Yaml.load(Fs.readFileSync(process.argv[2], 'utf8'))
    const log = new Logger(opts.verbose);
    const translator = new SphinxToTr(indexPath)
    const toc = await translator.indexPage(unnumberedLinkText || [])
    const headMatter = await translator.updateFrontMatter(new URL(frontMatterFile, `file://${process.cwd()}/`).href, {
        timeout: opts.timeout * 1000,
        useLocal: opts["use-local"],
        onError: log.error.bind(log),
        onWarning: log.warn.bind(log),
        onProgress: log.info.bind(log),
        disableSandbox: opts["disable-sandbox"],
        devtools: opts.devtools,
      })
    const copied = await translator.copyRecursively(headMatter, toc, Fs.readFileSync(topMatterFile, 'utf8'), outDir)
    // console.log(JSON.stringify(copied, null, 2))
  } catch (e) {
    fail(e, -1)
  }
}

function fail (message, code) {
  console.error(message)
  process.exit(code)
}
